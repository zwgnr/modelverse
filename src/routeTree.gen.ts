/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as SigninRouteImport } from './routes/signin'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as LayoutIndexRouteImport } from './routes/_layout/index'
import { Route as LayoutSettingsRouteImport } from './routes/_layout/settings'
import { Route as LayoutSettingsIndexRouteImport } from './routes/_layout/settings/index'
import { Route as LayoutSettingsUsageRouteImport } from './routes/_layout/settings/usage'
import { Route as LayoutSettingsSecurityRouteImport } from './routes/_layout/settings/security'
import { Route as LayoutSettingsCustomizeRouteImport } from './routes/_layout/settings/customize'
import { Route as LayoutSettingsApiKeysRouteImport } from './routes/_layout/settings/api-keys'
import { Route as LayoutChatChatidRouteImport } from './routes/_layout/chat.$chatid'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const SigninRoute = SigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSettingsRoute = LayoutSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSettingsIndexRoute = LayoutSettingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutSettingsRoute,
} as any)
const LayoutSettingsUsageRoute = LayoutSettingsUsageRouteImport.update({
  id: '/usage',
  path: '/usage',
  getParentRoute: () => LayoutSettingsRoute,
} as any)
const LayoutSettingsSecurityRoute = LayoutSettingsSecurityRouteImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => LayoutSettingsRoute,
} as any)
const LayoutSettingsCustomizeRoute = LayoutSettingsCustomizeRouteImport.update({
  id: '/customize',
  path: '/customize',
  getParentRoute: () => LayoutSettingsRoute,
} as any)
const LayoutSettingsApiKeysRoute = LayoutSettingsApiKeysRouteImport.update({
  id: '/api-keys',
  path: '/api-keys',
  getParentRoute: () => LayoutSettingsRoute,
} as any)
const LayoutChatChatidRoute = LayoutChatChatidRouteImport.update({
  id: '/chat/$chatid',
  path: '/chat/$chatid',
  getParentRoute: () => LayoutRoute,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/privacy': typeof PrivacyRoute
  '/signin': typeof SigninRoute
  '/terms': typeof TermsRoute
  '/settings': typeof LayoutSettingsRouteWithChildren
  '/': typeof LayoutIndexRoute
  '/chat/$chatid': typeof LayoutChatChatidRoute
  '/settings/api-keys': typeof LayoutSettingsApiKeysRoute
  '/settings/customize': typeof LayoutSettingsCustomizeRoute
  '/settings/security': typeof LayoutSettingsSecurityRoute
  '/settings/usage': typeof LayoutSettingsUsageRoute
  '/settings/': typeof LayoutSettingsIndexRoute
}
export interface FileRoutesByTo {
  '/privacy': typeof PrivacyRoute
  '/signin': typeof SigninRoute
  '/terms': typeof TermsRoute
  '/': typeof LayoutIndexRoute
  '/chat/$chatid': typeof LayoutChatChatidRoute
  '/settings/api-keys': typeof LayoutSettingsApiKeysRoute
  '/settings/customize': typeof LayoutSettingsCustomizeRoute
  '/settings/security': typeof LayoutSettingsSecurityRoute
  '/settings/usage': typeof LayoutSettingsUsageRoute
  '/settings': typeof LayoutSettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/signin': typeof SigninRoute
  '/terms': typeof TermsRoute
  '/_layout/settings': typeof LayoutSettingsRouteWithChildren
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/chat/$chatid': typeof LayoutChatChatidRoute
  '/_layout/settings/api-keys': typeof LayoutSettingsApiKeysRoute
  '/_layout/settings/customize': typeof LayoutSettingsCustomizeRoute
  '/_layout/settings/security': typeof LayoutSettingsSecurityRoute
  '/_layout/settings/usage': typeof LayoutSettingsUsageRoute
  '/_layout/settings/': typeof LayoutSettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/privacy'
    | '/signin'
    | '/terms'
    | '/settings'
    | '/'
    | '/chat/$chatid'
    | '/settings/api-keys'
    | '/settings/customize'
    | '/settings/security'
    | '/settings/usage'
    | '/settings/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/privacy'
    | '/signin'
    | '/terms'
    | '/'
    | '/chat/$chatid'
    | '/settings/api-keys'
    | '/settings/customize'
    | '/settings/security'
    | '/settings/usage'
    | '/settings'
  id:
    | '__root__'
    | '/_layout'
    | '/privacy'
    | '/signin'
    | '/terms'
    | '/_layout/settings'
    | '/_layout/'
    | '/_layout/chat/$chatid'
    | '/_layout/settings/api-keys'
    | '/_layout/settings/customize'
    | '/_layout/settings/security'
    | '/_layout/settings/usage'
    | '/_layout/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  PrivacyRoute: typeof PrivacyRoute
  SigninRoute: typeof SigninRoute
  TermsRoute: typeof TermsRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/settings/': {
      id: '/_layout/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof LayoutSettingsIndexRouteImport
      parentRoute: typeof LayoutSettingsRoute
    }
    '/_layout/settings/usage': {
      id: '/_layout/settings/usage'
      path: '/usage'
      fullPath: '/settings/usage'
      preLoaderRoute: typeof LayoutSettingsUsageRouteImport
      parentRoute: typeof LayoutSettingsRoute
    }
    '/_layout/settings/security': {
      id: '/_layout/settings/security'
      path: '/security'
      fullPath: '/settings/security'
      preLoaderRoute: typeof LayoutSettingsSecurityRouteImport
      parentRoute: typeof LayoutSettingsRoute
    }
    '/_layout/settings/customize': {
      id: '/_layout/settings/customize'
      path: '/customize'
      fullPath: '/settings/customize'
      preLoaderRoute: typeof LayoutSettingsCustomizeRouteImport
      parentRoute: typeof LayoutSettingsRoute
    }
    '/_layout/settings/api-keys': {
      id: '/_layout/settings/api-keys'
      path: '/api-keys'
      fullPath: '/settings/api-keys'
      preLoaderRoute: typeof LayoutSettingsApiKeysRouteImport
      parentRoute: typeof LayoutSettingsRoute
    }
    '/_layout/chat/$chatid': {
      id: '/_layout/chat/$chatid'
      path: '/chat/$chatid'
      fullPath: '/chat/$chatid'
      preLoaderRoute: typeof LayoutChatChatidRouteImport
      parentRoute: typeof LayoutRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface LayoutSettingsRouteChildren {
  LayoutSettingsApiKeysRoute: typeof LayoutSettingsApiKeysRoute
  LayoutSettingsCustomizeRoute: typeof LayoutSettingsCustomizeRoute
  LayoutSettingsSecurityRoute: typeof LayoutSettingsSecurityRoute
  LayoutSettingsUsageRoute: typeof LayoutSettingsUsageRoute
  LayoutSettingsIndexRoute: typeof LayoutSettingsIndexRoute
}

const LayoutSettingsRouteChildren: LayoutSettingsRouteChildren = {
  LayoutSettingsApiKeysRoute: LayoutSettingsApiKeysRoute,
  LayoutSettingsCustomizeRoute: LayoutSettingsCustomizeRoute,
  LayoutSettingsSecurityRoute: LayoutSettingsSecurityRoute,
  LayoutSettingsUsageRoute: LayoutSettingsUsageRoute,
  LayoutSettingsIndexRoute: LayoutSettingsIndexRoute,
}

const LayoutSettingsRouteWithChildren = LayoutSettingsRoute._addFileChildren(
  LayoutSettingsRouteChildren,
)

interface LayoutRouteChildren {
  LayoutSettingsRoute: typeof LayoutSettingsRouteWithChildren
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutChatChatidRoute: typeof LayoutChatChatidRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutSettingsRoute: LayoutSettingsRouteWithChildren,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutChatChatidRoute: LayoutChatChatidRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  PrivacyRoute: PrivacyRoute,
  SigninRoute: SigninRoute,
  TermsRoute: TermsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
